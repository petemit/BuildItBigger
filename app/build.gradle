apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.udacity.gradle.builditbigger"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        multiDexEnabled true
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        paid {
            applicationIdSuffix ".paid"
            versionNameSuffix "-paid"
        }
        free {
            applicationIdSuffix ".free"
            versionNameSuffix "-free"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':jokelibrary')
    compile project(':jokedisplay')
    compile project(path: ':backend', configuration: 'android-endpoints')
    compile 'com.android.support:appcompat-v7:25.3.1'

    freeCompile ('com.google.android.gms:play-services-ads:9.8.0'){
        exclude group: 'org.apache.httpcomponents'
    }
    compile 'com.google.appengine:appengine-tools-sdk:1.9.42'
    compile 'com.google.http-client:google-http-client:1.22.0'

    compile 'com.google.api-client:google-api-client-android:1.22.0'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
}

task performTest {
    doLast{

    }
    dependsOn ":backend:appengineRun"
    project(":backend").afterEvaluate { backend ->
        backend.extensions.appengine.daemon = true
    }
    finalizedBy ":app:connectedAndroidTest"
}
task myTest{
    doLast{
        println 'done with test'
    }
    dependsOn performTest
    finalizedBy ":backend:appengineStop"
}
/*
task runTests (dependsOn: ":backend:appengineRun"){
    project(":backend").afterEvaluate { backend ->
        backend.extensions.appengine.daemon = true
    }
    doLast{
        cAT
        appengineStop
    }
}*/

